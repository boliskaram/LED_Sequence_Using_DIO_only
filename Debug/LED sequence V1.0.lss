
LED sequence V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000067c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000006f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013bf  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  00001bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f0  00000000  00000000  000024be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000614  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b0e  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000408e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  74:	0c 94 3c 03 	jmp	0x678	; 0x678 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_Init>:
 */ 


#include "APP.h"

void APP_Init(void){
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	00 d0       	rcall	.+0      	; 0x84 <APP_Init+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <APP_Init+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	//------------------------------------- Test INIT LED peripheral -----------------------------------
	
	ST_LED_Config_t LED_Config;
	EN_LED_STATUS_t LED_ERROR = LED_OK ;
	
	LED_Config.LED_Port = PORT_A ;
  8a:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN0 ;
  8c:	19 82       	std	Y+1, r1	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  8e:	ce 01       	movw	r24, r28
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <ECUAL_LED_Init>
	
	LED_Config.LED_Port = PORT_A ;
  96:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN1 ;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	89 83       	std	Y+1, r24	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <ECUAL_LED_Init>
	
	LED_Config.LED_Port = PORT_A ;
  a4:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN2 ;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	89 83       	std	Y+1, r24	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <ECUAL_LED_Init>
	
	LED_Config.LED_Port = PORT_A ;
  b2:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN3 ;
  b4:	13 e0       	ldi	r17, 0x03	; 3
  b6:	19 83       	std	Y+1, r17	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <ECUAL_LED_Init>
	//------------------------------------- Test INIT Button peripheral --------------------------------
	
	ST_BUTTON_Config_t Button_Config ;
	EN_BUTTON_STATUS_t BUTTON_ERROR = BUTTON_OK ;
	
	Button_Config.buttonPort = PORT_D ;
  c0:	1c 83       	std	Y+4, r17	; 0x04
	Button_Config.buttonPin = PIN5;
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	8b 83       	std	Y+3, r24	; 0x03
	BUTTON_ERROR = ECUAL_BUTTON_Init(&Button_Config);
  c6:	ce 01       	movw	r24, r28
  c8:	03 96       	adiw	r24, 0x03	; 3
  ca:	0e 94 be 00 	call	0x17c	; 0x17c <ECUAL_BUTTON_Init>
	
	//---------------------------------------------------------------------------------------------	
	
}
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

000000de <APP_Update>:
	
	
void APP_Update(void){
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <APP_Update+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <APP_Update+0x8>
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	EN_LED_STATUS_t LED_ERROR = LED_OK ;
		
	ST_BUTTON_Config_t Button_Config ;
	EN_BUTTON_STATUS_t BUTTON_ERROR = BUTTON_OK ;
		
	EN_pinValue_t buttonValue = LOW ;
  ec:	1d 82       	std	Y+5, r1	; 0x05
				
	Button_Config.buttonPort = PORT_C ;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	8c 83       	std	Y+4, r24	; 0x04
	Button_Config.buttonPin = PIN1 ;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	8b 83       	std	Y+3, r24	; 0x03
		
	BUTTON_ERROR = ECUAL_BUTTON_Read(&Button_Config,&buttonValue);
  f6:	be 01       	movw	r22, r28
  f8:	6b 5f       	subi	r22, 0xFB	; 251
  fa:	7f 4f       	sbci	r23, 0xFF	; 255
  fc:	ce 01       	movw	r24, r28
  fe:	03 96       	adiw	r24, 0x03	; 3
 100:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ECUAL_BUTTON_Read>
		
		
	if (buttonValue){
 104:	8d 81       	ldd	r24, Y+5	; 0x05
 106:	88 23       	and	r24, r24
 108:	89 f1       	breq	.+98     	; 0x16c <APP_Update+0x8e>
		if(Count >= 0 && Count < 4){
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	78 f4       	brcc	.+30     	; 0x130 <APP_Update+0x52>
			LED_Config.LED_Port = PORT_A ;
 112:	1a 82       	std	Y+2, r1	; 0x02
			LED_Config.LED_Pin = PIN0 + Count ;
 114:	89 83       	std	Y+1, r24	; 0x01
			LED_ERROR = ECUAL_LED_ON(&LED_Config);
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 19 01 	call	0x232	; 0x232 <ECUAL_LED_ON>
				
			Count++;
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				Count = 0 ;
			}else{
			Count++;					
			}
		}
		while(buttonValue==High){
 128:	8d 81       	ldd	r24, Y+5	; 0x05
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	a9 f0       	breq	.+42     	; 0x158 <APP_Update+0x7a>
 12e:	1e c0       	rjmp	.+60     	; 0x16c <APP_Update+0x8e>
			LED_Config.LED_Pin = PIN0 + Count ;
			LED_ERROR = ECUAL_LED_ON(&LED_Config);
				
			Count++;
		}
		else if(Count >= 4 && Count < 8 ){
 130:	84 50       	subi	r24, 0x04	; 4
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	c8 f7       	brcc	.-14     	; 0x128 <APP_Update+0x4a>
			LED_Config.LED_Port = PORT_A ;
 136:	1a 82       	std	Y+2, r1	; 0x02
			LED_Config.LED_Pin = PIN0 + (Count-4);
 138:	89 83       	std	Y+1, r24	; 0x01
			LED_ERROR = ECUAL_LED_OFF(&LED_Config);
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	0e 94 36 01 	call	0x26c	; 0x26c <ECUAL_LED_OFF>
			if(Count == 7){
 142:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 146:	87 30       	cpi	r24, 0x07	; 7
 148:	19 f4       	brne	.+6      	; 0x150 <APP_Update+0x72>
				Count = 0 ;
 14a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 14e:	ec cf       	rjmp	.-40     	; 0x128 <APP_Update+0x4a>
			}else{
			Count++;					
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 156:	e8 cf       	rjmp	.-48     	; 0x128 <APP_Update+0x4a>
			}
		}
		while(buttonValue==High){
			BUTTON_ERROR = ECUAL_BUTTON_Read(&Button_Config,&buttonValue);
 158:	be 01       	movw	r22, r28
 15a:	6b 5f       	subi	r22, 0xFB	; 251
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	ce 01       	movw	r24, r28
 160:	03 96       	adiw	r24, 0x03	; 3
 162:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ECUAL_BUTTON_Read>
				Count = 0 ;
			}else{
			Count++;					
			}
		}
		while(buttonValue==High){
 166:	8d 81       	ldd	r24, Y+5	; 0x05
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	b1 f3       	breq	.-20     	; 0x158 <APP_Update+0x7a>
		}
		while(buttonValue==High){
			BUTTON_ERROR = ECUAL_BUTTON_Read(&Button_Config,&buttonValue);
		}
	}*/
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <ECUAL_BUTTON_Init>:
 *  Author: Bolis
 */ 

#include "BUTTON.h"

EN_BUTTON_STATUS_t ECUAL_BUTTON_Init(ST_BUTTON_Config_t* Button_Config){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <ECUAL_BUTTON_Init+0x6>
 182:	1f 92       	push	r1
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
	EN_BUTTON_STATUS_t buttonStatus = BUTTON_OK;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	
	ST_DIO_Config_t DIO_Config;
	
	DIO_Config.direction = INPUT ;
 188:	1b 82       	std	Y+3, r1	; 0x03
	DIO_Config.portName = Button_Config->buttonPort;
 18a:	fc 01       	movw	r30, r24
 18c:	21 81       	ldd	r18, Z+1	; 0x01
 18e:	29 83       	std	Y+1, r18	; 0x01
	DIO_Config.pinNumber = Button_Config->buttonPin;
 190:	80 81       	ld	r24, Z
 192:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Error=MCAL_DIO_Init_Pin(&DIO_Config);
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCAL_DIO_Init_Pin>
	
	if (DIO_Error == PORT_ERROR)
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	29 f0       	breq	.+10     	; 0x1aa <ECUAL_BUTTON_Init+0x2e>
	{
		buttonStatus = BUTTON_PORT_ERROR;
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	19 f0       	breq	.+6      	; 0x1ac <ECUAL_BUTTON_Init+0x30>
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <ECUAL_BUTTON_Init+0x30>
 1aa:	92 e0       	ldi	r25, 0x02	; 2
	else{
		buttonStatus = BUTTON_OK;
	}
	
	return buttonStatus;
}
 1ac:	89 2f       	mov	r24, r25
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <ECUAL_BUTTON_Read>:

EN_BUTTON_STATUS_t ECUAL_BUTTON_Read(ST_BUTTON_Config_t* Button_Config , EN_pinValue_t* pinValue ){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <ECUAL_BUTTON_Read+0x6>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	
	EN_BUTTON_STATUS_t buttonStatus = BUTTON_OK;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	ST_DIO_Data_Config_t DIO_Config;
	DIO_Config.portName = Button_Config->buttonPort;
 1c4:	fc 01       	movw	r30, r24
 1c6:	21 81       	ldd	r18, Z+1	; 0x01
 1c8:	29 83       	std	Y+1, r18	; 0x01
	DIO_Config.pinNumber = Button_Config->buttonPin;
 1ca:	80 81       	ld	r24, Z
 1cc:	8a 83       	std	Y+2, r24	; 0x02
	
	
	DIO_Error = MCAL_DIO_Read_Pin(&DIO_Config,pinValue);
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 c5 02 	call	0x58a	; 0x58a <MCAL_DIO_Read_Pin>
	
	if (DIO_Error == PORT_ERROR)
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	29 f0       	breq	.+10     	; 0x1e4 <ECUAL_BUTTON_Read+0x2a>
	{
		buttonStatus = BUTTON_PORT_ERROR;
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f0       	breq	.+6      	; 0x1e6 <ECUAL_BUTTON_Read+0x2c>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <ECUAL_BUTTON_Read+0x2c>
 1e4:	92 e0       	ldi	r25, 0x02	; 2
	else{
		buttonStatus = BUTTON_OK;
		
	}
	return buttonStatus ;
 1e6:	89 2f       	mov	r24, r25
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <ECUAL_LED_Init>:
 */ 


#include "LED.h"

EN_LED_STATUS_t ECUAL_LED_Init(ST_LED_Config_t* LED_Config){
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <ECUAL_LED_Init+0x6>
 1f8:	1f 92       	push	r1
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
	EN_LED_STATUS_t errorStatus = LED_OK ;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	ST_DIO_Config_t DIO_Config;
	DIO_Config.direction = OUTPUT ;
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	2b 83       	std	Y+3, r18	; 0x03
	DIO_Config.portName = LED_Config->LED_Port;
 202:	fc 01       	movw	r30, r24
 204:	21 81       	ldd	r18, Z+1	; 0x01
 206:	29 83       	std	Y+1, r18	; 0x01
	DIO_Config.pinNumber = LED_Config->LED_Pin;
 208:	80 81       	ld	r24, Z
 20a:	8a 83       	std	Y+2, r24	; 0x02
	
	DIO_Error = MCAL_DIO_Init_Pin(&DIO_Config);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCAL_DIO_Init_Pin>
	
	if(DIO_Error == PIN_ERROR)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	21 f0       	breq	.+8      	; 0x220 <ECUAL_LED_Init+0x2e>
	{
		errorStatus = LED_PIN_ERROR ;
	}
	else if(DIO_Error == PORT_ERROR)
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	21 f0       	breq	.+8      	; 0x224 <ECUAL_LED_Init+0x32>
	{
		errorStatus = LED_PORT_ERROR ;
	}
	else
	{
		errorStatus = LED_OK ;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	03 c0       	rjmp	.+6      	; 0x226 <ECUAL_LED_Init+0x34>
	
	DIO_Error = MCAL_DIO_Init_Pin(&DIO_Config);
	
	if(DIO_Error == PIN_ERROR)
	{
		errorStatus = LED_PIN_ERROR ;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	01 c0       	rjmp	.+2      	; 0x226 <ECUAL_LED_Init+0x34>
	}
	else if(DIO_Error == PORT_ERROR)
	{
		errorStatus = LED_PORT_ERROR ;
 224:	82 e0       	ldi	r24, 0x02	; 2
	{
		errorStatus = LED_OK ;
	}
	
	return errorStatus ;
}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <ECUAL_LED_ON>:


EN_LED_STATUS_t ECUAL_LED_ON(ST_LED_Config_t* LED_Config){
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <ECUAL_LED_ON+0x6>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	
	EN_LED_STATUS_t errorStatus = LED_OK ;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	
	ST_DIO_Data_Config_t DIO_DConfig;
	DIO_DConfig.portName = LED_Config->LED_Port;
 23c:	fc 01       	movw	r30, r24
 23e:	21 81       	ldd	r18, Z+1	; 0x01
 240:	29 83       	std	Y+1, r18	; 0x01
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;
 242:	80 81       	ld	r24, Z
 244:	8a 83       	std	Y+2, r24	; 0x02
	
	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,High);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	ce 01       	movw	r24, r28
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	0e 94 14 02 	call	0x428	; 0x428 <MCAL_DIO_Write_Pin>
	
	if(DIO_Error == PIN_ERROR){
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	21 f0       	breq	.+8      	; 0x25c <ECUAL_LED_ON+0x2a>
		errorStatus = LED_PIN_ERROR ;
		}else if(DIO_Error == PORT_ERROR){
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	21 f0       	breq	.+8      	; 0x260 <ECUAL_LED_ON+0x2e>
		errorStatus = LED_PORT_ERROR ;
		}else{
		errorStatus = LED_OK ;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	03 c0       	rjmp	.+6      	; 0x262 <ECUAL_LED_ON+0x30>
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;
	
	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,High);
	
	if(DIO_Error == PIN_ERROR){
		errorStatus = LED_PIN_ERROR ;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	01 c0       	rjmp	.+2      	; 0x262 <ECUAL_LED_ON+0x30>
		}else if(DIO_Error == PORT_ERROR){
		errorStatus = LED_PORT_ERROR ;
 260:	82 e0       	ldi	r24, 0x02	; 2
		}else{
		errorStatus = LED_OK ;
	}
	return errorStatus ;
}
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <ECUAL_LED_OFF>:


EN_LED_STATUS_t ECUAL_LED_OFF(ST_LED_Config_t* LED_Config){
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <ECUAL_LED_OFF+0x6>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
	
	EN_LED_STATUS_t errorStatus = LED_OK ;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;

	ST_DIO_Data_Config_t DIO_DConfig;
	DIO_DConfig.portName = LED_Config->LED_Port;
 276:	fc 01       	movw	r30, r24
 278:	21 81       	ldd	r18, Z+1	; 0x01
 27a:	29 83       	std	Y+1, r18	; 0x01
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;
 27c:	80 81       	ld	r24, Z
 27e:	8a 83       	std	Y+2, r24	; 0x02

	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,LOW);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 14 02 	call	0x428	; 0x428 <MCAL_DIO_Write_Pin>

	if(DIO_Error == PIN_ERROR){
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	21 f0       	breq	.+8      	; 0x296 <ECUAL_LED_OFF+0x2a>
		errorStatus = LED_PIN_ERROR ;
		}else if(DIO_Error == PORT_ERROR){
 28e:	83 30       	cpi	r24, 0x03	; 3
 290:	21 f0       	breq	.+8      	; 0x29a <ECUAL_LED_OFF+0x2e>
		errorStatus = LED_PORT_ERROR ;
		}else{
		errorStatus = LED_OK ;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	03 c0       	rjmp	.+6      	; 0x29c <ECUAL_LED_OFF+0x30>
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;

	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,LOW);

	if(DIO_Error == PIN_ERROR){
		errorStatus = LED_PIN_ERROR ;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <ECUAL_LED_OFF+0x30>
		}else if(DIO_Error == PORT_ERROR){
		errorStatus = LED_PORT_ERROR ;
 29a:	82 e0       	ldi	r24, 0x02	; 2
		}else{
		errorStatus = LED_OK ;
	}
	return errorStatus ;
}
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <main>:

int main(void)
{
	//DIO_test_Init();
	//LED_Test_Init();
	APP_Init();
 2a6:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_Init>
    /* Replace with your application code */
    while (1) 
    {
		//DIO_Test_Update();
		//LED_Test_Update();
		APP_Update();
 2aa:	0e 94 6f 00 	call	0xde	; 0xde <APP_Update>
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <main+0x4>

000002b0 <MCAL_DIO_Init_Pin>:
 * Created: 8/22/2023 11:46:41 PM
 *  Author: Bolis
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
 2b0:	fc 01       	movw	r30, r24
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
	switch(DIO_Config->portName){
 2b2:	90 81       	ld	r25, Z
 2b4:	91 30       	cpi	r25, 0x01	; 1
 2b6:	71 f1       	breq	.+92     	; 0x314 <MCAL_DIO_Init_Pin+0x64>
 2b8:	38 f0       	brcs	.+14     	; 0x2c8 <MCAL_DIO_Init_Pin+0x18>
 2ba:	92 30       	cpi	r25, 0x02	; 2
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <MCAL_DIO_Init_Pin+0x10>
 2be:	50 c0       	rjmp	.+160    	; 0x360 <MCAL_DIO_Init_Pin+0xb0>
 2c0:	93 30       	cpi	r25, 0x03	; 3
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <MCAL_DIO_Init_Pin+0x16>
 2c4:	73 c0       	rjmp	.+230    	; 0x3ac <MCAL_DIO_Init_Pin+0xfc>
 2c6:	96 c0       	rjmp	.+300    	; 0x3f4 <MCAL_DIO_Init_Pin+0x144>
		
		case PORT_A:
			if(DIO_Config->direction == OUTPUT){
 2c8:	82 81       	ldd	r24, Z+2	; 0x02
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	81 f4       	brne	.+32     	; 0x2ee <MCAL_DIO_Init_Pin+0x3e>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 2ce:	21 81       	ldd	r18, Z+1	; 0x01
 2d0:	2a 30       	cpi	r18, 0x0A	; 10
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <MCAL_DIO_Init_Pin+0x26>
 2d4:	91 c0       	rjmp	.+290    	; 0x3f8 <MCAL_DIO_Init_Pin+0x148>
					SET_BIT(DDRA,DIO_Config->pinNumber);
 2d6:	3a b3       	in	r19, 0x1a	; 26
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <MCAL_DIO_Init_Pin+0x32>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	2a 95       	dec	r18
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <MCAL_DIO_Init_Pin+0x2e>
 2e6:	83 2b       	or	r24, r19
 2e8:	8a bb       	out	0x1a, r24	; 26
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 2ee:	81 11       	cpse	r24, r1
 2f0:	85 c0       	rjmp	.+266    	; 0x3fc <MCAL_DIO_Init_Pin+0x14c>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 2f2:	21 81       	ldd	r18, Z+1	; 0x01
 2f4:	2a 30       	cpi	r18, 0x0A	; 10
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <MCAL_DIO_Init_Pin+0x4a>
 2f8:	83 c0       	rjmp	.+262    	; 0x400 <__LOCK_REGION_LENGTH__>
					RESET_BIT(DDRA,DIO_Config->pinNumber);
 2fa:	3a b3       	in	r19, 0x1a	; 26
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <MCAL_DIO_Init_Pin+0x56>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	2a 95       	dec	r18
 308:	e2 f7       	brpl	.-8      	; 0x302 <MCAL_DIO_Init_Pin+0x52>
 30a:	80 95       	com	r24
 30c:	83 23       	and	r24, r19
 30e:	8a bb       	out	0x1a, r24	; 26
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
				errorStatus = DIRECTION_ERROR ;
			}
			break;
			
		case PORT_B:
			if(DIO_Config->direction == OUTPUT){
 314:	82 81       	ldd	r24, Z+2	; 0x02
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	81 f4       	brne	.+32     	; 0x33a <MCAL_DIO_Init_Pin+0x8a>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 31a:	21 81       	ldd	r18, Z+1	; 0x01
 31c:	2a 30       	cpi	r18, 0x0A	; 10
 31e:	08 f0       	brcs	.+2      	; 0x322 <MCAL_DIO_Init_Pin+0x72>
 320:	71 c0       	rjmp	.+226    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
					SET_BIT(DDRB,DIO_Config->pinNumber);
 322:	37 b3       	in	r19, 0x17	; 23
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <MCAL_DIO_Init_Pin+0x7e>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	2a 95       	dec	r18
 330:	e2 f7       	brpl	.-8      	; 0x32a <MCAL_DIO_Init_Pin+0x7a>
 332:	83 2b       	or	r24, r19
 334:	87 bb       	out	0x17, r24	; 23
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 33a:	81 11       	cpse	r24, r1
 33c:	65 c0       	rjmp	.+202    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 33e:	21 81       	ldd	r18, Z+1	; 0x01
 340:	2a 30       	cpi	r18, 0x0A	; 10
 342:	08 f0       	brcs	.+2      	; 0x346 <MCAL_DIO_Init_Pin+0x96>
 344:	63 c0       	rjmp	.+198    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
					RESET_BIT(DDRB,DIO_Config->pinNumber);
 346:	37 b3       	in	r19, 0x17	; 23
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <MCAL_DIO_Init_Pin+0xa2>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	2a 95       	dec	r18
 354:	e2 f7       	brpl	.-8      	; 0x34e <MCAL_DIO_Init_Pin+0x9e>
 356:	80 95       	com	r24
 358:	83 23       	and	r24, r19
 35a:	87 bb       	out	0x17, r24	; 23
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
				errorStatus = DIRECTION_ERROR ;
			}
			break;
			
		case PORT_C:
			if(DIO_Config->direction == OUTPUT){
 360:	82 81       	ldd	r24, Z+2	; 0x02
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	81 f4       	brne	.+32     	; 0x386 <MCAL_DIO_Init_Pin+0xd6>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 366:	21 81       	ldd	r18, Z+1	; 0x01
 368:	2a 30       	cpi	r18, 0x0A	; 10
 36a:	08 f0       	brcs	.+2      	; 0x36e <MCAL_DIO_Init_Pin+0xbe>
 36c:	51 c0       	rjmp	.+162    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
					SET_BIT(DDRC,DIO_Config->pinNumber);
 36e:	34 b3       	in	r19, 0x14	; 20
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <MCAL_DIO_Init_Pin+0xca>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	2a 95       	dec	r18
 37c:	e2 f7       	brpl	.-8      	; 0x376 <MCAL_DIO_Init_Pin+0xc6>
 37e:	83 2b       	or	r24, r19
 380:	84 bb       	out	0x14, r24	; 20
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 386:	81 11       	cpse	r24, r1
 388:	45 c0       	rjmp	.+138    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 38a:	21 81       	ldd	r18, Z+1	; 0x01
 38c:	2a 30       	cpi	r18, 0x0A	; 10
 38e:	08 f0       	brcs	.+2      	; 0x392 <MCAL_DIO_Init_Pin+0xe2>
 390:	43 c0       	rjmp	.+134    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
					RESET_BIT(DDRC,DIO_Config->pinNumber);
 392:	34 b3       	in	r19, 0x14	; 20
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <MCAL_DIO_Init_Pin+0xee>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	2a 95       	dec	r18
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <MCAL_DIO_Init_Pin+0xea>
 3a2:	80 95       	com	r24
 3a4:	83 23       	and	r24, r19
 3a6:	84 bb       	out	0x14, r24	; 20
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret
				errorStatus = DIRECTION_ERROR ;
			}
			break;
			
		case PORT_D:
			if(DIO_Config->direction == OUTPUT){
 3ac:	82 81       	ldd	r24, Z+2	; 0x02
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	79 f4       	brne	.+30     	; 0x3d0 <MCAL_DIO_Init_Pin+0x120>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 3b2:	21 81       	ldd	r18, Z+1	; 0x01
 3b4:	2a 30       	cpi	r18, 0x0A	; 10
 3b6:	90 f5       	brcc	.+100    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					SET_BIT(DDRD,DIO_Config->pinNumber);
 3b8:	31 b3       	in	r19, 0x11	; 17
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <MCAL_DIO_Init_Pin+0x114>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	2a 95       	dec	r18
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <MCAL_DIO_Init_Pin+0x110>
 3c8:	83 2b       	or	r24, r19
 3ca:	81 bb       	out	0x11, r24	; 17
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 3d0:	81 11       	cpse	r24, r1
 3d2:	26 c0       	rjmp	.+76     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 3d4:	21 81       	ldd	r18, Z+1	; 0x01
 3d6:	2a 30       	cpi	r18, 0x0A	; 10
 3d8:	28 f5       	brcc	.+74     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
					RESET_BIT(DDRD,DIO_Config->pinNumber);
 3da:	31 b3       	in	r19, 0x11	; 17
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <MCAL_DIO_Init_Pin+0x136>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	2a 95       	dec	r18
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <MCAL_DIO_Init_Pin+0x132>
 3ea:	80 95       	com	r24
 3ec:	83 23       	and	r24, r19
 3ee:	81 bb       	out	0x11, r24	; 17
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
			}else{
				errorStatus = DIRECTION_ERROR ;
			}
			break;
		default:
			errorStatus = PORT_ERROR ;
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	08 95       	ret
		case PORT_A:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret
					RESET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else{
				errorStatus = DIRECTION_ERROR ;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					RESET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
		case PORT_B:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	08 95       	ret
					RESET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else{
				errorStatus = DIRECTION_ERROR ;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					RESET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
		case PORT_C:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret
					RESET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}		
			}else{
				errorStatus = DIRECTION_ERROR ;
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					RESET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	08 95       	ret
		case PORT_D:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					SET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	08 95       	ret
					RESET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else{
				errorStatus = DIRECTION_ERROR ;
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
					RESET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 424:	81 e0       	ldi	r24, 0x01	; 1
		default:
			errorStatus = PORT_ERROR ;
			break;
	}
	return errorStatus ;
}
 426:	08 95       	ret

00000428 <MCAL_DIO_Write_Pin>:


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
 428:	fc 01       	movw	r30, r24
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
		
	switch(DIO_Config->portName){
 42a:	90 81       	ld	r25, Z
 42c:	91 30       	cpi	r25, 0x01	; 1
 42e:	69 f1       	breq	.+90     	; 0x48a <MCAL_DIO_Write_Pin+0x62>
 430:	38 f0       	brcs	.+14     	; 0x440 <MCAL_DIO_Write_Pin+0x18>
 432:	92 30       	cpi	r25, 0x02	; 2
 434:	09 f4       	brne	.+2      	; 0x438 <MCAL_DIO_Write_Pin+0x10>
 436:	4e c0       	rjmp	.+156    	; 0x4d4 <MCAL_DIO_Write_Pin+0xac>
 438:	93 30       	cpi	r25, 0x03	; 3
 43a:	09 f4       	brne	.+2      	; 0x43e <MCAL_DIO_Write_Pin+0x16>
 43c:	70 c0       	rjmp	.+224    	; 0x51e <MCAL_DIO_Write_Pin+0xf6>
 43e:	93 c0       	rjmp	.+294    	; 0x566 <MCAL_DIO_Write_Pin+0x13e>
		case PORT_A:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 440:	81 81       	ldd	r24, Z+1	; 0x01
 442:	8a 30       	cpi	r24, 0x0A	; 10
 444:	08 f0       	brcs	.+2      	; 0x448 <MCAL_DIO_Write_Pin+0x20>
 446:	91 c0       	rjmp	.+290    	; 0x56a <MCAL_DIO_Write_Pin+0x142>
				if(pinValue==High){
 448:	61 30       	cpi	r22, 0x01	; 1
 44a:	71 f4       	brne	.+28     	; 0x468 <MCAL_DIO_Write_Pin+0x40>
					SET_BIT(PORTA,DIO_Config->pinNumber);
 44c:	4b b3       	in	r20, 0x1b	; 27
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <MCAL_DIO_Write_Pin+0x32>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <MCAL_DIO_Write_Pin+0x2e>
 45e:	cb 01       	movw	r24, r22
 460:	84 2b       	or	r24, r20
 462:	8b bb       	out	0x1b, r24	; 27
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	08 95       	ret
	switch(DIO_Config->portName){
		case PORT_A:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				if(pinValue==High){
					SET_BIT(PORTA,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 468:	61 11       	cpse	r22, r1
 46a:	81 c0       	rjmp	.+258    	; 0x56e <MCAL_DIO_Write_Pin+0x146>
					RESET_BIT(PORTA,DIO_Config->pinNumber);
 46c:	4b b3       	in	r20, 0x1b	; 27
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	b9 01       	movw	r22, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <MCAL_DIO_Write_Pin+0x52>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	8a 95       	dec	r24
 47c:	e2 f7       	brpl	.-8      	; 0x476 <MCAL_DIO_Write_Pin+0x4e>
 47e:	cb 01       	movw	r24, r22
 480:	80 95       	com	r24
 482:	84 23       	and	r24, r20
 484:	8b bb       	out	0x1b, r24	; 27
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		case PORT_B:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 48a:	81 81       	ldd	r24, Z+1	; 0x01
 48c:	8a 30       	cpi	r24, 0x0A	; 10
 48e:	08 f0       	brcs	.+2      	; 0x492 <MCAL_DIO_Write_Pin+0x6a>
 490:	70 c0       	rjmp	.+224    	; 0x572 <MCAL_DIO_Write_Pin+0x14a>
				if(pinValue==High){
 492:	61 30       	cpi	r22, 0x01	; 1
 494:	71 f4       	brne	.+28     	; 0x4b2 <MCAL_DIO_Write_Pin+0x8a>
					SET_BIT(PORTB,DIO_Config->pinNumber);
 496:	48 b3       	in	r20, 0x18	; 24
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	b9 01       	movw	r22, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <MCAL_DIO_Write_Pin+0x7c>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	8a 95       	dec	r24
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <MCAL_DIO_Write_Pin+0x78>
 4a8:	cb 01       	movw	r24, r22
 4aa:	84 2b       	or	r24, r20
 4ac:	88 bb       	out	0x18, r24	; 24
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
			
		case PORT_B:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				if(pinValue==High){
					SET_BIT(PORTB,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 4b2:	61 11       	cpse	r22, r1
 4b4:	60 c0       	rjmp	.+192    	; 0x576 <MCAL_DIO_Write_Pin+0x14e>
					RESET_BIT(PORTB,DIO_Config->pinNumber);
 4b6:	48 b3       	in	r20, 0x18	; 24
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <MCAL_DIO_Write_Pin+0x9c>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <MCAL_DIO_Write_Pin+0x98>
 4c8:	cb 01       	movw	r24, r22
 4ca:	80 95       	com	r24
 4cc:	84 23       	and	r24, r20
 4ce:	88 bb       	out	0x18, r24	; 24
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		case PORT_C:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 4d4:	81 81       	ldd	r24, Z+1	; 0x01
 4d6:	8a 30       	cpi	r24, 0x0A	; 10
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <MCAL_DIO_Write_Pin+0xb4>
 4da:	4f c0       	rjmp	.+158    	; 0x57a <MCAL_DIO_Write_Pin+0x152>
				if(pinValue==High){
 4dc:	61 30       	cpi	r22, 0x01	; 1
 4de:	71 f4       	brne	.+28     	; 0x4fc <MCAL_DIO_Write_Pin+0xd4>
					SET_BIT(PORTC,DIO_Config->pinNumber);
 4e0:	45 b3       	in	r20, 0x15	; 21
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	b9 01       	movw	r22, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <MCAL_DIO_Write_Pin+0xc6>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	8a 95       	dec	r24
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <MCAL_DIO_Write_Pin+0xc2>
 4f2:	cb 01       	movw	r24, r22
 4f4:	84 2b       	or	r24, r20
 4f6:	85 bb       	out	0x15, r24	; 21
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
			
		case PORT_C:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				if(pinValue==High){
					SET_BIT(PORTC,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 4fc:	61 11       	cpse	r22, r1
 4fe:	3f c0       	rjmp	.+126    	; 0x57e <MCAL_DIO_Write_Pin+0x156>
					RESET_BIT(PORTC,DIO_Config->pinNumber);
 500:	45 b3       	in	r20, 0x15	; 21
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	b9 01       	movw	r22, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <MCAL_DIO_Write_Pin+0xe6>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <MCAL_DIO_Write_Pin+0xe2>
 512:	cb 01       	movw	r24, r22
 514:	80 95       	com	r24
 516:	84 23       	and	r24, r20
 518:	85 bb       	out	0x15, r24	; 21
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
		
		case PORT_D:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 51e:	81 81       	ldd	r24, Z+1	; 0x01
 520:	8a 30       	cpi	r24, 0x0A	; 10
 522:	78 f5       	brcc	.+94     	; 0x582 <MCAL_DIO_Write_Pin+0x15a>
				if(pinValue==High){
 524:	61 30       	cpi	r22, 0x01	; 1
 526:	71 f4       	brne	.+28     	; 0x544 <MCAL_DIO_Write_Pin+0x11c>
					SET_BIT(PORTD,DIO_Config->pinNumber);
 528:	42 b3       	in	r20, 0x12	; 18
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	b9 01       	movw	r22, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <MCAL_DIO_Write_Pin+0x10e>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	8a 95       	dec	r24
 538:	e2 f7       	brpl	.-8      	; 0x532 <MCAL_DIO_Write_Pin+0x10a>
 53a:	cb 01       	movw	r24, r22
 53c:	84 2b       	or	r24, r20
 53e:	82 bb       	out	0x12, r24	; 18
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret
		
		case PORT_D:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				if(pinValue==High){
					SET_BIT(PORTD,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 544:	61 11       	cpse	r22, r1
 546:	1f c0       	rjmp	.+62     	; 0x586 <MCAL_DIO_Write_Pin+0x15e>
					RESET_BIT(PORTD,DIO_Config->pinNumber);
 548:	42 b3       	in	r20, 0x12	; 18
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	b9 01       	movw	r22, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <MCAL_DIO_Write_Pin+0x12e>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <MCAL_DIO_Write_Pin+0x12a>
 55a:	cb 01       	movw	r24, r22
 55c:	80 95       	com	r24
 55e:	84 23       	and	r24, r20
 560:	82 bb       	out	0x12, r24	; 18
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		default:
			errorStatus =PORT_ERROR;
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	08 95       	ret
				}else{
					errorStatus = VALUE_ERROR;
				}
				
			}else{
				errorStatus = PIN_ERROR;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTA,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTA,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 56e:	84 e0       	ldi	r24, 0x04	; 4
 570:	08 95       	ret
					RESET_BIT(PORTB,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
				}
			}else{
				errorStatus = PIN_ERROR;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTB,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTB,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 576:	84 e0       	ldi	r24, 0x04	; 4
 578:	08 95       	ret
					RESET_BIT(PORTC,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
				}
			}else{
				errorStatus = PIN_ERROR;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTC,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTC,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	08 95       	ret
					RESET_BIT(PORTD,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
				}
			}else{
				errorStatus = PIN_ERROR;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTD,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTD,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 586:	84 e0       	ldi	r24, 0x04	; 4
		default:
			errorStatus =PORT_ERROR;
			break;
	}
	return errorStatus;
}
 588:	08 95       	ret

0000058a <MCAL_DIO_Read_Pin>:

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(ST_DIO_Data_Config_t* DIO_Config,EN_pinValue_t* pinValue){
 58a:	fc 01       	movw	r30, r24
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
		
	switch(DIO_Config->portName){
 58c:	90 81       	ld	r25, Z
 58e:	91 30       	cpi	r25, 0x01	; 1
 590:	01 f1       	breq	.+64     	; 0x5d2 <MCAL_DIO_Read_Pin+0x48>
 592:	30 f0       	brcs	.+12     	; 0x5a0 <MCAL_DIO_Read_Pin+0x16>
 594:	92 30       	cpi	r25, 0x02	; 2
 596:	b1 f1       	breq	.+108    	; 0x604 <MCAL_DIO_Read_Pin+0x7a>
 598:	93 30       	cpi	r25, 0x03	; 3
 59a:	09 f4       	brne	.+2      	; 0x59e <MCAL_DIO_Read_Pin+0x14>
 59c:	4b c0       	rjmp	.+150    	; 0x634 <MCAL_DIO_Read_Pin+0xaa>
 59e:	62 c0       	rjmp	.+196    	; 0x664 <MCAL_DIO_Read_Pin+0xda>

		case PORT_A:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 5a0:	41 81       	ldd	r20, Z+1	; 0x01
 5a2:	4a 30       	cpi	r20, 0x0A	; 10
 5a4:	08 f0       	brcs	.+2      	; 0x5a8 <MCAL_DIO_Read_Pin+0x1e>
 5a6:	60 c0       	rjmp	.+192    	; 0x668 <MCAL_DIO_Read_Pin+0xde>
				*pinValue = READ_BIT(PINA,DIO_Config->pinNumber);
 5a8:	29 b3       	in	r18, 0x19	; 25
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	04 2e       	mov	r0, r20
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <MCAL_DIO_Read_Pin+0x2c>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	0a 94       	dec	r0
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <MCAL_DIO_Read_Pin+0x28>
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	82 23       	and	r24, r18
 5be:	93 23       	and	r25, r19
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <MCAL_DIO_Read_Pin+0x3c>
 5c2:	95 95       	asr	r25
 5c4:	87 95       	ror	r24
 5c6:	4a 95       	dec	r20
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <MCAL_DIO_Read_Pin+0x38>
 5ca:	fb 01       	movw	r30, r22
 5cc:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(ST_DIO_Data_Config_t* DIO_Config,EN_pinValue_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		case PORT_B:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 5d2:	41 81       	ldd	r20, Z+1	; 0x01
 5d4:	4a 30       	cpi	r20, 0x0A	; 10
 5d6:	08 f0       	brcs	.+2      	; 0x5da <MCAL_DIO_Read_Pin+0x50>
 5d8:	49 c0       	rjmp	.+146    	; 0x66c <MCAL_DIO_Read_Pin+0xe2>
				*pinValue = READ_BIT(PINB,DIO_Config->pinNumber);
 5da:	26 b3       	in	r18, 0x16	; 22
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	04 2e       	mov	r0, r20
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <MCAL_DIO_Read_Pin+0x5e>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <MCAL_DIO_Read_Pin+0x5a>
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	82 23       	and	r24, r18
 5f0:	93 23       	and	r25, r19
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <MCAL_DIO_Read_Pin+0x6e>
 5f4:	95 95       	asr	r25
 5f6:	87 95       	ror	r24
 5f8:	4a 95       	dec	r20
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <MCAL_DIO_Read_Pin+0x6a>
 5fc:	fb 01       	movw	r30, r22
 5fe:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(ST_DIO_Data_Config_t* DIO_Config,EN_pinValue_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		case PORT_C:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 604:	41 81       	ldd	r20, Z+1	; 0x01
 606:	4a 30       	cpi	r20, 0x0A	; 10
 608:	98 f5       	brcc	.+102    	; 0x670 <MCAL_DIO_Read_Pin+0xe6>
				*pinValue = READ_BIT(PINC,DIO_Config->pinNumber);
 60a:	23 b3       	in	r18, 0x13	; 19
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	04 2e       	mov	r0, r20
 612:	02 c0       	rjmp	.+4      	; 0x618 <MCAL_DIO_Read_Pin+0x8e>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	0a 94       	dec	r0
 61a:	e2 f7       	brpl	.-8      	; 0x614 <MCAL_DIO_Read_Pin+0x8a>
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	82 23       	and	r24, r18
 620:	93 23       	and	r25, r19
 622:	02 c0       	rjmp	.+4      	; 0x628 <MCAL_DIO_Read_Pin+0x9e>
 624:	95 95       	asr	r25
 626:	87 95       	ror	r24
 628:	4a 95       	dec	r20
 62a:	e2 f7       	brpl	.-8      	; 0x624 <MCAL_DIO_Read_Pin+0x9a>
 62c:	fb 01       	movw	r30, r22
 62e:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(ST_DIO_Data_Config_t* DIO_Config,EN_pinValue_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		case PORT_D:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
 634:	41 81       	ldd	r20, Z+1	; 0x01
 636:	4a 30       	cpi	r20, 0x0A	; 10
 638:	e8 f4       	brcc	.+58     	; 0x674 <MCAL_DIO_Read_Pin+0xea>
				*pinValue = READ_BIT(PIND,DIO_Config->pinNumber);
 63a:	20 b3       	in	r18, 0x10	; 16
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	04 2e       	mov	r0, r20
 642:	02 c0       	rjmp	.+4      	; 0x648 <MCAL_DIO_Read_Pin+0xbe>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <MCAL_DIO_Read_Pin+0xba>
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	82 23       	and	r24, r18
 650:	93 23       	and	r25, r19
 652:	02 c0       	rjmp	.+4      	; 0x658 <MCAL_DIO_Read_Pin+0xce>
 654:	95 95       	asr	r25
 656:	87 95       	ror	r24
 658:	4a 95       	dec	r20
 65a:	e2 f7       	brpl	.-8      	; 0x654 <MCAL_DIO_Read_Pin+0xca>
 65c:	fb 01       	movw	r30, r22
 65e:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(ST_DIO_Data_Config_t* DIO_Config,EN_pinValue_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	08 95       	ret
			}else{
				errorStatus = PIN_ERROR;
			}
			break;
		default:
			errorStatus =PORT_ERROR;
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	08 95       	ret

		case PORT_A:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				*pinValue = READ_BIT(PINA,DIO_Config->pinNumber);
			}else{
				errorStatus = PIN_ERROR;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret
			
		case PORT_B:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				*pinValue = READ_BIT(PINB,DIO_Config->pinNumber);
			}else{
				errorStatus = PIN_ERROR;
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	08 95       	ret
			
		case PORT_C:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				*pinValue = READ_BIT(PINC,DIO_Config->pinNumber);
			}else{
				errorStatus = PIN_ERROR;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	08 95       	ret
			
		case PORT_D:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=9 ){
				*pinValue = READ_BIT(PIND,DIO_Config->pinNumber);
			}else{
				errorStatus = PIN_ERROR;
 674:	81 e0       	ldi	r24, 0x01	; 1
		default:
			errorStatus =PORT_ERROR;
			break;
	}
	return errorStatus;
}
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
